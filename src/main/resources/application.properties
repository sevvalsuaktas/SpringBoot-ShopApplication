spring.application.name=shop

# Datasource (PostgreSQL via Docker)
spring.datasource.url=jdbc:postgresql://localhost:5432/shopdb
spring.datasource.username=shopuser
spring.datasource.password=shoppass
spring.datasource.driver-class-name=org.postgresql.Driver

# JPA / Hibernate
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true

# Log seviyeleri
logging.level.org.springframework.data.redis.cache=DEBUG
logging.level.org.springframework.cache=DEBUG
logging.level.org.springframework.data.redis=DEBUG
logging.level.com.example.shop.shop.client=DEBUG
logging.level.feign=DEBUG
logging.level.org.springframework.cloud.openfeign=DEBUG


# Cache
spring.cache.type=redis
spring.cache.redis.time-to-live=600000

# JPA: Open Session In View kapat (REST için önerilen)
spring.jpa.open-in-view=false

# Redis repository taramasını kapat (yalnızca cache kullanıyoruz)
spring.data.redis.repositories.enabled=false

# hem Docker'da hem de IDE'de �alistirmak i�in
spring.data.redis.host=${SPRING_REDIS_HOST:localhost}
spring.data.redis.port=${SPRING_REDIS_PORT:6379}


# JWT
jwt.secret=0qaUfaNJkvJdUBvt2luLRBdvJZHCrOh2VCBwJ3IQSt4=
jwt.expiration-ms=3600000

# Actuator
management.endpoints.web.exposure.include=health,info,metrics,circuitbreakers

inventory.service.url=${INVENTORY_SERVICE_URL:http://localhost:8080}

# Resilience4j
resilience4j.circuitbreaker.instances.inventoryService.register-health-indicator=true
resilience4j.circuitbreaker.instances.inventoryService.sliding-window-type=COUNT_BASED
resilience4j.circuitbreaker.instances.inventoryService.sliding-window-size=10
resilience4j.circuitbreaker.instances.inventoryService.minimum-number-of-calls=5
resilience4j.circuitbreaker.instances.inventoryService.failure-rate-threshold=50
resilience4j.circuitbreaker.instances.inventoryService.wait-duration-in-open-state=10s